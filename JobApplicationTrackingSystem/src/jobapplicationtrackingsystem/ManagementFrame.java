/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jobapplicationtrackingsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author ysfdnmz
 */
public class ManagementFrame extends javax.swing.JFrame {

    /**
     * Creates new form ManagementFrame
     */
    private int randomize() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JobApplicationTrackingSystemPU");
        EntityManager em = emf.createEntityManager();

        Query q = em.createQuery("Select a from Availablepositions a ");
        Random r = new Random();

        int randomid = r.nextInt(100);
        List<Availablepositions> availablepositionstlist = q.getResultList();

        for (Availablepositions availablepositions : availablepositionstlist) {
            if (availablepositions.getId() == randomid) {
                randomid = randomize();
            }

        }
        em.close();
        emf.close();

        return randomid;
    }

    public ManagementFrame() throws SQLException {
        initComponents();

        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JobApplicationTrackingSystemPU");
        EntityManager em = emf.createEntityManager();
        Query q = em.createQuery("Select a from Availablepositions a");
        List<Availablepositions> mylist = q.getResultList();

        for (Availablepositions availableposition : mylist) {
            dcbm.addElement(availableposition.getPosition());

        }
        RemoveComboBox.setModel(dcbm);
        ShowComboBox.setModel(dcbm);

        DefaultTableModel dtm = new DefaultTableModel();

        Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/sample", "app", "app");
        String sqlRequest = "Select * From Applicants";
        PreparedStatement ps = con.prepareStatement(sqlRequest);

        ResultSet rs = ps.executeQuery();
        ResultSetMetaData rsmd = rs.getMetaData();

        for (int i = 0; i < rsmd.getColumnCount() - 2; i++) {
            dtm.addColumn(rsmd.getColumnName(i + 1));
        }
        while (rs.next()) {
            dtm.addRow(new Object[]{rs.getInt("ID"), rs.getString("Name"), rs.getString("Surname"), rs.getString("Gender"), rs.getInt("Age"), rs.getString("ApplicationPosition")});
        }
        ApplicantsTable.setModel(dtm);

        em.close();
        emf.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ApplicantsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        RemoveComboBox = new javax.swing.JComboBox<>();
        Remove = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AddField = new javax.swing.JTextField();
        ShowComboBox = new javax.swing.JComboBox<>();
        Show = new javax.swing.JButton();
        Add = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ApplicantsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(ApplicantsTable);

        jButton1.setText("Seçili Başvuruyu İncele");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Not: Başvuruyu İncelemeden silemezsiniz.");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 153, 255));
        jLabel2.setText("Başvuru Listesi");

        jLabel4.setText("Seçili Pozisyonu Kapat:");

        Remove.setText("Kaldır");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        jLabel3.setText("Bir Pozisyon Ekle");

        jLabel5.setText("Seçili Pozisyon'un Başvurularını Göster");

        Show.setText("Göster");
        Show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowActionPerformed(evt);
            }
        });

        Add.setText("Ekle");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(ShowComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Show))
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RemoveComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Remove)
                        .addGap(132, 132, 132))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel5)
                        .addComponent(AddField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RemoveComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Remove)
                    .addComponent(ShowComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Show)
                    .addComponent(Add))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int SelectedIndex = ApplicantsTable.getSelectedRow();
        int SelectedId = (int) (ApplicantsTable.getValueAt(SelectedIndex, 0));

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JobApplicationTrackingSystemPU");
        EntityManager em = emf.createEntityManager();

        Query getTable = em.createQuery("SELECT a FROM Applicants a");
        List<Applicants> applicants = getTable.getResultList();

        for (Applicants applicant : applicants) {
            if (applicant.getId() == SelectedId) {
                new ApplicationReviewFrame(applicant.getId(), applicant.getName(), applicant.getSurname(), applicant.getGender(), applicant.getAge(), applicant.getApplicationposition(), applicant.getApplicationtext(), applicant.getFlag()).setVisible(true);
            }
        }

        em.close();
        emf.close();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // TODO add your handling code here: 
        String removingPosition = RemoveComboBox.getSelectedItem().toString();

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JobApplicationTrackingSystemPU");
        EntityManager em = emf.createEntityManager();

        Query q2 = em.createQuery("select a from Applicants a");
        List<Applicants> mylist = q2.getResultList();

        for (Applicants applicants : mylist) {
            if (applicants.getApplicationposition().equals(removingPosition)) {
                if (applicants.getFlag() == 0) {
                    JOptionPane.showMessageDialog(null, "Kapatmak istediğiniz başvuru pozisyonu için sonuçlandırılmamış başvurular mevcut. Lütfen ilgili başvuru pozisyonu için tüm başvuruları sonuçlandırın.");
                    return;
                }
            }

        }

        StringBuilder sb = new StringBuilder();
        sb.append("delete from Availablepositions a where a.position=");
        sb.append(removingPosition);

        Query q = em.createQuery("delete from Availablepositions a where a.position=:Position");
        q.setParameter("Position", removingPosition);

        em.getTransaction().begin();
        q.executeUpdate();
        em.getTransaction().commit();
        
        
        em.close();
        emf.close();

        try {
            new ManagementFrame().setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(ManagementFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RemoveActionPerformed

    private void ShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowActionPerformed
        // TODO add your handling code here:
        String selected = ShowComboBox.getSelectedItem().toString();
        DefaultTableModel dtm = new DefaultTableModel();

        for (int i = 0; i < ApplicantsTable.getColumnCount(); i++) {
            dtm.addColumn(ApplicantsTable.getColumnName(i));
        }

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JobApplicationTrackingSystemPU");
        EntityManager em = emf.createEntityManager();
        Query q = em.createQuery("Select a from Applicants a ");
        List<Applicants> mylist = q.getResultList();

        for (Applicants applicant : mylist) {
            if (applicant.getApplicationposition().equals(selected)) {
                dtm.addRow(new Object[]{applicant.getId(), applicant.getName(), applicant.getSurname(), applicant.getGender(), applicant.getAge(), applicant.getApplicationposition()});
            }

        }
        ApplicantsTable.setModel(dtm);

        em.close();
        emf.close();

    }//GEN-LAST:event_ShowActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:

        String addposition = AddField.getText();

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("JobApplicationTrackingSystemPU");
        EntityManager em = emf.createEntityManager();

        em.getTransaction().begin();

        Availablepositions newposition = new Availablepositions();

        newposition.setId(randomize());
        newposition.setPosition(addposition);

        em.persist(newposition);
        em.getTransaction().commit();

        em.close();
        emf.close();

    }//GEN-LAST:event_AddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ManagementFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ManagementFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JTextField AddField;
    private javax.swing.JTable ApplicantsTable;
    private javax.swing.JButton Remove;
    private javax.swing.JComboBox<String> RemoveComboBox;
    private javax.swing.JButton Show;
    private javax.swing.JComboBox<String> ShowComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
